name: Build on semver

on:
  push:
    branches:
      - main
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+"
  release:
    types: [published]
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  build:
    name: build ${{ matrix.target }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_suffix: linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_suffix: windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_suffix: macos

    env:
      CARGO_TERM_COLOR: always

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y mold clang pkg-config libssl-dev
          echo 'RUSTFLAGS=-C link-arg=-fuse-ld=mold' >> $GITHUB_ENV

      - name: Install deps (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install llvm pkg-config

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build
        run: cargo build --locked --release --target ${{ matrix.target }}

      - name: Package artifact
        shell: bash
        run: |
          BIN="slurp"
          [[ "${{ matrix.target }}" == *windows* ]] && BIN="slurp.exe"
          OUTDIR="dist/${{ matrix.artifact_suffix }}"
          mkdir -p "$OUTDIR"
          cp "target/${{ matrix.target }}/release/${BIN}" "$OUTDIR/"
          [[ -f README.md ]] && cp README.md "$OUTDIR/"
          if [[ "${{ matrix.target }}" == *windows* ]]; then
            7z a "slurp-${{ matrix.artifact_suffix }}.zip" "$OUTDIR/*"
          else
            tar -C "dist" -czf "slurp-${{ matrix.artifact_suffix }}.tar.gz" "${{ matrix.artifact_suffix }}"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: slurp-${{ matrix.artifact_suffix }}
          path: |
            slurp-${{ matrix.artifact_suffix }}.tar.gz
            slurp-${{ matrix.artifact_suffix }}.zip
          if-no-files-found: ignore

  attach-to-release:
    name: attach artifacts to GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Publish assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/slurp-*.tar.gz
            artifacts/**/slurp-*.zip

